# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MyPlugin1
                                 A QGIS plugin
 This plugin runs union and intersection between layers simultaneously.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-10
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Lauren Ortiz - MVBG
        email                : lauren@mountain-viewgroup.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from ast import Index
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    Qgis,
    QgsProject,  
    QgsProcessing, 
    QgsProcessingAlgorithm,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterEnum,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterField,
    QgsProcessingParameterString,
    QgsProcessingParameterVectorLayer,
    QgsMessageLog)
from qgis.gui import QgsFileWidget
from qgis.utils import iface
from qgis import processing
import string

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .my_plugin1_dialog import MyPlugin1Dialog
import os.path


class MyPlugin1:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MyPlugin1_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&My Plugin1')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MyPlugin1', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/my_plugin1/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Union + Intersect'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&My Plugin1'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MyPlugin1Dialog()
        
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        
        # Clear the contents of the comboBox from previous runs
        self.dlg.mComboBox_2.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.mComboBox_2.addItems([layer.name() for layer in layers])
        
        # Displays directory files for the user to choose from 
        QgsFileWidget.StorageMode.GetDirectory 

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result: 
            QgsMessageLog.logMessage(str(result), 'info', Qgis.Warning)
            class RunAlgorithm(QgsProcessingAlgorithm):

                DISCARD_NONMATCHING = 'DISCARD_NONMATCHING'
                INPUT = 'INPUT'
                JOIN = 'JOIN'
                JOIN_FIELDS = 'JOIN_FIELDS'
                METHOD = 'METHOD'
                OUTPUT = 'OUTPUT'
                PREDICATE = 'PREDICATE'
                PREFIX = 'PREFIX'

                CREATEINDEX = 'CREATEINDEX'
                DATABASE = 'DATABASE'
                DROP_STRING_LENGTH = 'DROP_STRING_LENGTH'
                ENCODING = 'ENCODING'
                FORCE_SINGLEPART = 'FORCE_SINGLEPART'
                GEOMETRY_COLUMN = 'GEOMETRY_COLUMN'
                LOWERCASE_NAMES = 'LOWERCASE_NAMES'
                OVERWRITE = 'OVERWRITE' 
                PRIMARY_KEY = 'PRIMARY_KEY'
                TABLENAME = 'TABLENAME'

                def __init__(self):
                    super().__init__()

                def createInstance(self):
                    return type(self)()

                def displayName(self):
                    return "Union + Intersect"

                def name(self):
                    name = "".join([
                        character for character in self.displayName().lower()
                        if character in string.ascii_letters
                    ])
                    return name

                def initAlgorithm(self, config=None):
                    self.addParameter(
                        QgsProcessingParameterBoolean(
                            self.DISCARD_NONMATCHING,
                            self.tr('Discard records which could not be joined'),
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterFeatureSource(
                            self.INPUT,
                            self.tr('Join to features in'),
                            types = [QgsProcessing.TypeVectorAnyGeometry],
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterFeatureSource(
                            self.JOIN,
                            self.tr('By comparing to'),
                            types = [QgsProcessing.TypeVectorAnyGeometry],
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterField(
                            self.JOIN_FIELDS,
                            self.tr('Fields to add (leave empty to use all fields)'),
                            parentLayerParameterName = "JOIN FIELDS",
                            types = [QgsProcessingParameterField.DataType.Any],
                            defaultValue = None,
                            allowMultiple = True
                        )
                    ) 
                    self.addParameter(
                        QgsProcessingParameterEnum(
                            self.METHOD,
                            self.tr('Join type'),
                            parentLayerParameterName = "METHOD",
                            defaultValue = None,
                            allowMultiple = True
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterFeatureSink(
                            self.OUTPUT,
                            self.tr('Joined layer'),
                            types = [QgsProcessing.SourceType.TypeVectorAnyGeometry],
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterEnum(
                            self.PREDICATE,
                            self.tr('Features they (geometric predicate)'),
                            defaultValue = None,
                            allowMultiple = True
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterString(
                            self.PREFIX,
                            self.tr('Joined field prefix'),
                            defaultValue = None,
                            multiLine = True
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterBoolean(
                            self.CREATEINDEX,
                            self.tr('Create spatial index'),
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterVectorLayer(
                            self.DATABASE,
                            self.tr('File database'),
                            types = [QgsProcessing.TypeVectorAnyGeometry],
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterBoolean(
                            self.DROP_STRING_LENGTH,
                            self.tr('Drop length constraints on character fields'),
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterString(
                            self.ENCODING,
                            self.tr('Encoding'),
                            defaultValue = None,
                            multiLine = True
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterBoolean(
                            self.FORCE_SINGLEPART,
                            self.tr('Create single-part geometries instead of multi-part'),
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterString(
                            self.GEOMETRY_COLUMN,
                            self.tr('Geometry column'),
                            defaultValue = None,
                            multiLine = True
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterBoolean(
                            self.LOWERCASE_NAMES,
                            self.tr('Convert field names to lowercase'),
                            defaultValue = None                        
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterBoolean(
                            self.OVERWRITE,
                            self.tr('Overwrite'),
                            defaultValue = None
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterField(
                            self.PRIMARY_KEY,
                            self.tr('Primary key field'),
                            defaultValue = None,
                            type = [QgsProcessingParameterField.DataType.Any],
                            allowMultiple = True
                        )
                    )
                    self.addParameter(
                        QgsProcessingParameterString(
                            self.TABLENAME,
                            self.tr('Table to import to'),
                            defaultValue = None,
                            multiLine = True
                        )
                    )
                def processAlgorithm(self):
                    
                    # Gets directory file path
                    output_path = self.dlg.mQgsFileWidget.filePath()  
                    QgsMessageLog.logMessage(str(output_path), 'info', Qgis.Warning)
                    
                    # Layers selected in Map Layer ComboBox
                    selectedLayerIndex = self.dlg.mMapLayerComboBox.currentIndex() 
                    selectedLayer1 = layers[selectedLayerIndex].layer() 
                    
                    selectedLayerIndex = self.dlg.mComboBox_2.currentIndex()
                    selectedLayer2 = layers[selectedLayerIndex].layer()

                    layersChecked = self.dlg.mComboBox_2.checkedItems()
 
                    # if theres more than 1 layers checked then use [next checked layer] as input
                    # for next algorithm until all [checkedlayers] have looped through
                    
                    counter = 0
                    for i in layersChecked:
                        selectedLayer2 = i
                        inputLayer = selectedLayer1
                        if counter > 0:
                            inputLayer = result['OUTPUT']
 
                        parameters1 = {
                            'DISCARD_NONMATCHING' : False,
                            'INPUT' : inputLayer,
                            'JOIN' : selectedLayer2,
                            'JOIN_FIELDS' : [],
                            'METHOD' : 0,
                            'OUTPUT' : 'memory:',
                            'PREDICATE' : [0,4],
                            'PREFIX' : ''}                   
                        # Runs processing algorithms
                        result = processing.run("native:joinattributesbylocation", parameters1)
                        counter = counter + 1

                        parameters2 = { 
                            'CREATEINDEX' : True, 
                            'DATABASE' : output_path, 
                            'DROP_STRING_LENGTH' : False, 
                            'ENCODING' : 'UTF-8', 
                            'FORCE_SINGLEPART' : False, 
                            'GEOMETRY_COLUMN' : 'shape', 
                            'INPUT' : result['OUTPUT'], 
                            'LOWERCASE_NAMES' : True, 
                            'OVERWRITE' : True, 
                            'PRIMARY_KEY' : '', 
                            'TABLENAME' : 'Output' }

                        processing.runAndLoadResults("qgis:importintospatialite", parameters2)

                # Adds success message at the top of the project
                self.iface.messageBar().pushMessage("Success", "Output layer correctly generated",level=Qgis.Success, duration=3)

                processAlgorithm(self)
        else:
                    self.iface.messageBar().pushMessage("Oops", "The plugin is not working as it should", level=Qgis.Critical, duration=3)

                    return {}